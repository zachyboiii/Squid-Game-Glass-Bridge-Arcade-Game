module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    const CLK_FREQ = $is_sim() ? 1000 : 10000000 // put 1000 for sim, 100M for hardware 
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 3 for sim, 16 for hardware
    const SLOW_CLOCK_DIV = $is_sim() ? 9 : 26 // put 9 for sim, 26 for hardware 

    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        edge_detector edge_dt_start_btn(#RISE(1),#FALL(0))
        edge_detector edge_dt_easy_btn(#RISE(1),#FALL(0))
        edge_detector edge_dt_med_btn(#RISE(1),#FALL(0))
        edge_detector edge_dt_hard_btn(#RISE(1),#FALL(0))
        edge_detector edge_dt_left_btn(#RISE(1),#FALL(0))
        edge_detector edge_dt_right_btn(#RISE(1), #FALL(0)) 
        button_conditioner btn_cond_start_btn(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_easy_btn(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_med_btn(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_hard_btn(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_left_btn(#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_right_btn(#CLK_FREQ(CLK_FREQ))
        // reset button? 

        .rst(rst) {
            // Reduce DIV values for simulation so it doesn't take forever
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
            game_datapath game_datapath(#SLOW_CLOCK_DIV(SLOW_CLOCK_DIV))

            //multi_decimal_counter dec_ctr (#DIGITS(4))
            //counter ctr (#SIZE(1), #DIV($is_sim() ? 8 : 24))
        }
    }
    
    bin_to_dec bin_to_dec_converter(#DIGITS(4))

    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = c{3b0, io_button} // connect buttons to LEDs
        //led = game_datapath.debug
        
        usb_tx = usb_rx         // loop serial port
        
        io_led = 3x{{8h00}}    // turn LEDs off
        io_segment = 8hff          // turn segments off
        io_select = 4hf           // select no digits
        
        btn_cond_start_btn.in = io_dip[0][7]
        btn_cond_easy_btn.in = io_dip[1][4]
        btn_cond_med_btn.in = io_button[1]
        btn_cond_hard_btn.in = io_button[2]
        btn_cond_left_btn.in = io_button[3]
        btn_cond_right_btn.in = io_button[4]
        
        edge_dt_start_btn.in = btn_cond_start_btn.out 
        edge_dt_easy_btn.in = btn_cond_easy_btn.out 
        edge_dt_med_btn.in = btn_cond_med_btn.out 
        edge_dt_hard_btn.in = btn_cond_hard_btn.out 
        edge_dt_left_btn.in = btn_cond_left_btn.out 
        edge_dt_right_btn.in = btn_cond_right_btn.out // Get edge of button press

        game_datapath.start_btn = edge_dt_start_btn.out
        game_datapath.easy_btn = edge_dt_easy_btn.out 
        game_datapath.med_btn = edge_dt_med_btn.out
        game_datapath.hard_btn = edge_dt_hard_btn.out
        game_datapath.left_btn = edge_dt_left_btn.out
        game_datapath.right_btn = edge_dt_right_btn.out
                
        
        
        
        //Updating 7 Segments
        seg.values = 4x{{4b0}} // default to all 0 first
        //seg.values = bin_to_dec_converter.digits
        //bin_to_dec_converter.value = game_datapath.current_step_out
        
        bin_to_dec_converter.value = game_datapath.timer_out
        seg.values = bin_to_dec_converter.digits

      
        io_led[2] = game_datapath.left_choices_out_g
        io_led[1] = game_datapath.left_choices_out_r
        io_led[0] = game_datapath.right_choices_out_g
        led = game_datapath.right_choices_out_r
        

        
        io_segment = ~seg.seg // connect segments to the driver
        io_select = ~seg.sel  // connect digit select to the driver
        
        
    }
}