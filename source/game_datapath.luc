module game_datapath#(
    SLOW_CLOCK_DIV ~ 26 : SLOW_CLOCK_DIV > 0 // Control timer tick(SLOW_CLK)
)( 
    input start_btn,
    input easy_btn,
    input med_btn, 
    input hard_btn,
    input left_btn,
    input right_btn,  // All buttons

    input clk,  // clock
    input rst,  // reset

    // output to LEDs/7-segs
    output timer_out[32],
    output left_choices_out_r[8],
    output left_choices_out_g[8],
    output right_choices_out_r[8],
    output right_choices_out_g[8],
    output safe_path_out[8],
    //output timer_done_out, 
    output current_step_out[4]
    
) {
    
    
    // temp variables 
    sig input_alu_a[32]
    sig input_alu_b[32]
    
    
    
    

    alu game_alu
    //pn_gen random(.clk(clk), .rst(rst))


    .clk(clk){
 
        counter game_timer_clock(#SIZE(1),#DIV(SLOW_CLOCK_DIV),.rst(rst)) //slow 1-bit counter tick once per second
        edge_detector edge_detector_game_timer(#RISE(1), #FALL(0), .in(game_timer_clock.value)) // Outputs 1 only when game_timer transition from 0--> 1
        
        // Control Unit FSM generating all control signals 
        game_cu game_cu(
            .start_btn(start_btn),
            .easy_btn(easy_btn),
            .med_btn(med_btn),
            .hard_btn(hard_btn),
            .left_btn(left_btn),
            .right_btn(right_btn),
            .rst(rst),
            .decrease_timer(edge_detector_game_timer.out)
            
            
        )
        
        game_regfiles game_regfiles(
            .we(game_cu.regfile_we),
            .wa(game_cu.regfile_wa),
            .ra1(game_cu.regfile_ra1),
            .ra2(game_cu.regfile_ra2),
            .rst(rst)
        )
       
    }
    
    always{
        // bootstrap rd2 output to CU for convenient branching conditions
        game_cu.regfile_rd2  = game_regfiles.rd2  
        game_cu.regfile_rd1 = game_regfiles.rd1
        //random.next = game_cu.next
        //random.seed = 6781203480
        
        // asel mux
        case(game_cu.asel){
            b000: input_alu_a = game_regfiles.rd1       // From regfile
            b001: input_alu_a = b00000000  // constant 0 8b0
            b010: input_alu_a = b11111111  // constant 1 8b1
            b011: input_alu_a = b10101010
            b100: input_alu_a = d30 // constant 30 (0x1E) 
            
            default: //b10 unused
                input_alu_a = 0  
            
        }
        // bsel mux
        case(game_cu.bsel){
            b000: input_alu_b = game_regfiles.rd2 
            b001: input_alu_b = d0 // Constant 0 
            b010: input_alu_b = d1 // Constant 1 
            b011: input_alu_b = d2 // Constant 2 
            b100: input_alu_b = d8 // Constant 8 
            default: 
                input_alu_b = 0 
                      
        }
        
        // alu (Feed A,B and selected alufn into ALU)
        game_alu.a = input_alu_a 
        game_alu.b = input_alu_b 
        game_alu.alufn = game_cu.alufn
        
        //wdsel mux 
        case(game_cu.wdsel){
            b00: 
                 game_regfiles.data = game_alu.out 
                 timer_out = game_regfiles.timer_out
            b01: 
                game_regfiles.data = d88 // Win indiciator 
                timer_out = d88 // Win show 88 
            b10: game_regfiles.data = d99 // Losing indicator 
                timer_out = d99 // Lose show 00
            default: 
                game_regfiles.data = game_alu.out
                timer_out = game_regfiles.timer_out
        }
        
        // Wired from REG file and control unit to output ports

        
        left_choices_out_g = game_regfiles.left_choices_out_g
        left_choices_out_r = game_regfiles.left_choices_out_r
        right_choices_out_g = game_regfiles.right_choices_out_g
        right_choices_out_r = game_regfiles.right_choices_out_r
        safe_path_out = game_regfiles.safe_path_out
        //timer_done_out = game_regfiles.timer_done_out
        current_step_out = game_regfiles.current_step_out 
        
        
        
        
        
    }
}